#(authorAndTime)


function ListPage() {
        
	var settings,admin,form,table,layer,util,fox,upload,xmSelect;
	#if(isTree)
	// 树形结构记录当前上级节点ID
	var #(parentIdVar) = #(rootId);
	var navStack=[[0,fox.translate("根节点")]];
	#end
	//模块基础路径
	const moduleURL="#(moduleURL)";
	var dataTable=null;
	/**
      * 入口函数，初始化
      */
	this.init=function(layui) {
     	
     	admin = layui.admin,settings = layui.settings,form = layui.form,upload = layui.upload,laydate= layui.laydate;
		table = layui.table,layer = layui.layer,util = layui.util,fox = layui.foxnic,xmSelect = layui.xmSelect;
		
     	//渲染表格
     	renderTable();
		#if(isTree)
		//初始化层级导航
		refreshNav();
		#end
		//初始化搜索输入框组件
		initSearchFields();
		//绑定搜索框事件
		bindSearchEvent();
		//绑定按钮事件
		bindButtonEvent();
		//绑定行操作按钮事件
    	bindRowOperationEvent();
     }
     
     
     /**
      * 渲染表格
      */
    function renderTable() {
		$(window).resize(function() {
			fox.adjustSearchElement();
		});
		fox.adjustSearchElement();
		//
		function renderTableInternal() {
			var ps={};
			var contitions={};
			#if(beforeQueryFunc!=null)
			#(beforeQueryFunc.name)(contitions);
			if(Object.keys(contitions).length>0) {
				ps = {searchField: "$composite", searchValue: JSON.stringify(contitions)};
			}
			#end


			var h=$(".search-bar").height();
			dataTable=fox.renderTable({
				elem: '#data-table',
				toolbar: '#toolbarTemplate',
				defaultToolbar: ['filter', 'print'],
				url: moduleURL +'/query-paged-list',
				height: 'full-'+(h+28),
				limit: 50,
				where: ps,
				#if(isTree)
				//树形结构需要传递相关参数
				where: { #(parentIdVar) : #(parentIdVar) } ,
				#end
				cols: [[
					{ fixed: 'left',type: 'numbers' },
					{ fixed: 'left',type:'checkbox' }
					#for(f : fields)
					#if(!f.disableInList)
					#if(f.typeName.equals("date_input"))
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet: function (d) { return fox.dateFormat(d.#(f.varName)); }}
					#elseif(f.typeName.equals("upload") && f.uploadField.isImageOnly && f.uploadField.count==1)
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet: function (d) { return '<img style="height:100%;" fileType="image/png" onclick="window.previewImage(this)"  src="'+apiurls.storage.image+'?id='+ d.#(f.varName)+'" />'; } }
					#elseif(f.typeName.equals("radio_box"))
					#if(f.radioField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)", fixed:#(f.fixInList), hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getDictText(RADIO_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#if(f.radioField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getEnumText(RADIO_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#elseif(f.typeName.equals("check_box"))
					#if(f.checkField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getDictText(CHECK_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#if(f.checkField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getEnumText(CHECK_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#elseif(f.typeName.equals("logic_switch"))
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet: '#cell-tpl-#(f.varName)'}
					#elseif(f.typeName.equals("select_box"))
					#if(f.selectField.enumTypeName!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getEnumText(SELECT_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#if(f.selectField.dictCode!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet:function (d){ return fox.getDictText(SELECT_#(f.varName.toUpperCase())_DATA,d.#(f.varName));}}
					#end
					#if(f.selectField.queryApi!=null)
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)'), templet: function (d) { return fox.joinLabel(#if(f.selectField.fillBy!=null)d.#(f.selectField.fillBy)#else null #end,"#(f.selectField.textField)");}}
					#end
					#else
					,{ field: '#(f.varName)', align:"#(f.alignInList)",fixed:#(f.fixInList),  hide:#(f.isHideInList), sort: #(f.sortInList), title: fox.translate('#(f.labelInList)') #if(f.listFillByPropertyNames!=null), templet: function (d) { return fox.getProperty(d,#(f.listFillByPropertyNames));}  #end}
					#end
					#end
					#end
					#if(!disableSpaceColumn)
					,{ field: fox.translate('空白列'), align:"center", hide:false, sort: false, title: "",minWidth:8,width:8,unresize:true}
					#end
					#if(hasOperateColumn)
					,{ field: 'row-ops', fixed: 'right', align: 'center', toolbar: '#tableOperationTemplate', title: fox.translate('操作'), width: #(operateColumnWidth) }
					#end
				]],
				footer : {
					exportExcel : admin.checkAuth(AUTH_PREFIX+":export"),
					importExcel : admin.checkAuth(AUTH_PREFIX+":import")?{
						params : {} ,
						callback : function(r) {
							if(r.success) {
								layer.msg(fox.translate('数据导入成功')+"!");
							} else {
								layer.msg(fox.translate('数据导入失败')+"!");
							}
						}
					}:false
				}
			});
			#if(hasLogicField)
			//绑定 Switch 切换事件
			#for(f : fields)
			#if(f.typeName.equals("logic_switch"))
			fox.bindSwitchEvent("cell-tpl-#(f.varName)",moduleURL +'/update','#(idPropertyName)','#(f.varName)',function(r){});
			#end
			#end
			#end
			//绑定排序事件
			table.on('sort(data-table)', function(obj){
			  refreshTableData(obj.field,obj.type);
			});
		}
		setTimeout(renderTableInternal,1);
    };

	/**
      * 刷新表格数据
      */
	function refreshTableData(sortField,sortType) {
		var value = {};
		#for(f : searchFields)
		#if(!f.isHideInSearch)
		#if(f.typeName.equals("logic_switch"))
		value.#(f.varName)={ value: xmSelect.get("##(f.varName)",true).getValue("value"), label:xmSelect.get("##(f.varName)",true).getValue("nameStr") };
		#else if(f.typeName.equals("radio_box"))
		value.#(f.varName)={ value: xmSelect.get("##(f.varName)",true).getValue("value"), label:xmSelect.get("##(f.varName)",true).getValue("nameStr")};
		#else if(f.typeName.equals("select_box"))
		#if(f.selectField.queryApi!=null)
		#if(f.search.fuzzySearch)
		value.#(f.varName)={ value: $("##(f.varName)").val()#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, fillBy:"#(f.selectField.fillBy)",field:"#(f.selectField.textField)" };
		#else
		value.#(f.varName)={ value: xmSelect.get("##(f.varName)",true).getValue("value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, fillBy:"#(f.selectField.fillBy)",field:"#(f.selectField.valueField)", label:xmSelect.get("##(f.varName)",true).getValue("nameStr") };
		#end
		#else
		value.#(f.varName)={ value: xmSelect.get("##(f.varName)",true).getValue("value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, label:xmSelect.get("##(f.varName)",true).getValue("nameStr")};
		#end
		#else if(f.typeName.equals("check_box"))
		value.#(f.varName)={ value: xmSelect.get("##(f.varName)",true).getValue("value")#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix)"#end, label:xmSelect.get("##(f.varName)",true).getValue("nameStr")};
		#else if(f.typeName.equals("date_input"))
		#if(f.search.searchInRange)
		value.#(f.varName)={ begin: $("##(f.varName)-begin").val(), end: $("##(f.varName)-end").val() };
		#else
		value.#(f.varName)={ value: $("##(f.varName)").val()};
		#end
		#else if(f.typeName.equals("number_input"))
		#if(f.search.searchInRange)
		value.#(f.varName)={ begin: $("##(f.varName)-begin").val(), end: $("##(f.varName)-end").val() };
		#else
		value.#(f.varName)={ value: $("##(f.varName)").val()};
		#end
		#else
		value.#(f.varName)={ value: $("##(f.varName)").val()#if(f.search!=null && f.search.fuzzySearch) ,fuzzy: true,valuePrefix:"#(f.search.valuePrefix)",valueSuffix:"#(f.search.valueSuffix) "#end};
		#end
		#end
		#end
		#if(beforeQueryFunc!=null)
		#(beforeQueryFunc.name)(value);
		#end
		var ps={searchField: "$composite", searchValue: JSON.stringify(value)};
		if(sortField) {
			ps.sortField=sortField;
			ps.sortType=sortType;
		}
		#if(isTree)
		// 树形结构锁定上级ID
		ps.#(parentIdVar)=#(parentIdVar);
		#end
		table.reload('data-table', { where : ps });
	}
    
    #if(isTree) 
	//导航刷新函数
	function refreshNav() {
		$("#tree-nav").empty();
		for (var i=0;i<navStack.length;i++) {
			var last=i==navStack.length-1;
			$("#tree-nav").append("<a href='javascript:' class='nav-node' index='"+i+"'>"+navStack[i][1]+"</a>")
			if(!last) {
				$("#tree-nav").append('<span lay-separator="">/</span>');
			}
		}
		//点击事件
		$(".nav-node").click(function(it){
			it=$(this);
			//倒换
			var z=it.attr('index');
			var tmp=[];
			for (var i=0;i<=z;i++) {
				//debugger;
				tmp.push(navStack[i]);
			}
			navStack=tmp;
			#(parentIdVar)=navStack[navStack.length-1][0];
			resetSearchFields();
			//
			refreshTableData();
			refreshNav();
		});
	};
	#end 
	
	/**
	  * 获得已经选中行的数据,不传入 field 时，返回所有选中的记录，指定 field 时 返回指定的字段集合
	  */
	function getCheckedList(field) {
		var checkStatus = table.checkStatus('data-table');
		var data = checkStatus.data;
		if(!field) return data;
		for(var i=0;i<data.length;i++) data[i]=data[i][field];
		return data;
	}
	
	/**
	 * 重置搜索框
	 */
	function resetSearchFields() {
		$('#search-field').val("");
		$('#search-input').val("");
		layui.form.render();
	}

	function initSearchFields() {

		fox.switchSearchRow();

	#for(f : searchFields)
	#if(!f.isHideInSearch)
		#if(f.typeName.equals("logic_switch"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: false
		});
		#else if(f.typeName.equals("radio_box"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: false,
			//toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#if(f.radioField.dictCode!=null)
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({name:data[i].text,value:data[i].code});
				}
				return opts;
			}
			#end
			#if(f.radioField.enumTypeName!=null)
			transform:function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					opts.push({name:data[i].text,value:data[i].code});
				}
				return opts;
			}
			#end
		});
		#else if(f.typeName.equals("check_box"))
		//渲染 #(f.varName) 搜索框
		fox.renderSelectBox({
			el: "#(f.varName)",
			size: "small",
			radio: false,
			//toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#if(f.checkField.dictCode!=null)
				transform: function(data) {
					//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
					var opts=[];
					for (var i = 0; i < data.length; i++) {
						if(!data[i]) continue;
						opts.push({name:data[i].text,value:data[i].code});
					}
					return opts;
				}
			#end
			#if(f.checkField.enumTypeName!=null)
				transform:function(data) {
					//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
					var opts=[];
					if(!data) return opts;
					for (var i = 0; i < data.length; i++) {
						opts.push({name:data[i].text,value:data[i].code});
					}
					return opts;
				}
			#end
		});
		#else if(f.typeName.equals("date_input"))
		#if(f.search.searchInRange)
		laydate.render({
			elem: '##(f.varName)-begin',
			trigger:"click"
		});
		laydate.render({
			elem: '##(f.varName)-end',
			trigger:"click"
		});
		#else
		laydate.render({
			elem: '##(f.varName)',
			trigger:"click"
		});
		#end
		#else if(f.typeName.equals("select_box"))
		//渲染 #(f.varName) 下拉字段
		fox.renderSelectBox({
			el: "#(f.varName)",
			radio: false,
			size: "small",
			filterable: #(f.selectField.filter),
			#if(f.selectField.paging)
			paging: true,
			pageRemote: true,
			#end
			#if(f.selectField.toolbar)
			toolbar: {show:true,showIcon:true,list:["CLEAR","REVERSE"]},
			#end
			//转换数据
			#if(f.selectField.enumTypeName!=null)
			transform:function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.queryApi!=null)
			#if(f.selectField.filter)
			searchField: "#(f.selectField.textField)", //请自行调整用于搜索的字段名称
			extraParam: {}, //额外的查询参数，Object 或是 返回 Object 的函数
			#end
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.dictCode!=null)
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
		});
	#end
	#end
	#end
		fox.renderSearchInputs();
	}
	
	/**
	 * 绑定搜索框事件
	 */
	function bindSearchEvent() {
		//回车键查询
        $(".search-input").keydown(function(event) {
			if(event.keyCode !=13) return;
		  	refreshTableData();
        });

        // 搜索按钮点击事件
        $('#search-button').click(function () {
           refreshTableData();
        });

		// 搜索按钮点击事件
		$('#search-button-advance').click(function () {
			fox.switchSearchRow(function (ex){
				if(ex=="1") {
					$('#search-button-advance span').text("关闭");
				} else {
					$('#search-button-advance span').text("更多");
				}
			});
		});
	}
	
	/**
	 * 绑定按钮事件
	  */
	function bindButtonEvent() {

		//头工具栏事件
		table.on('toolbar(data-table)', function(obj){
			var checkStatus = table.checkStatus(obj.config.id);
			switch(obj.event){
				case 'create':
					openCreateFrom();
					break;
				#if(isSimplePK)
				case 'batch-del':
					batchDelete();
					break;
				#end
				case 'other':
					break;
					//自定义头工具栏右侧图标 - 提示
				case 'LAYTABLE_TIPS':
					layer.alert('这是工具栏右侧自定义的一个图标按钮');
					break;
			};
		});


		//添加按钮点击事件
        function openCreateFrom() {
        	//设置新增是初始化数据
        	var data={};
        	#if(isTree) 
        	data.#(parentIdVar)=#(parentIdVar);
        	#end
			admin.putTempData('#(formDataKey)-form-action', "create",true);
            showEditForm(data);
        };
		
		#if(isSimplePK)
        //批量删除按钮点击事件
        function batchDelete() {
          
			var ids=getCheckedList("#(idPropertyName)");
            if(ids.length==0) {
            	layer.msg(fox.translate('请选择需要删除的')+fox.translate('#(topic)')+"!");
            	return;
            }
            //调用批量删除接口
			layer.confirm(fox.translate('确定删除已选中的')+fox.translate('#(topic)')+fox.translate('吗？'), function (i) {
				layer.close(i);
				layer.load(2);
                admin.request(moduleURL+"/delete-by-ids", { #(idsPropertyName): ids }, function (data) {
                    layer.closeAll('loading');
                    if (data.success) {
                        layer.msg(data.message, {icon: 1, time: 500});
                        refreshTableData();
                    } else {
                        layer.msg(data.message, {icon: 2, time: 1500});
                    }
                });
			});
        }
        #end
	}
     
    /**
     * 绑定行操作按钮事件
     */
    function bindRowOperationEvent() {
		// 工具条点击事件
		table.on('tool(data-table)', function (obj) {
			var data = obj.data;
			var layEvent = obj.event;
			admin.putTempData('#(formDataKey)-form-action', "",true);
			if (layEvent === 'edit') { // 修改
				//延迟显示加载动画，避免界面闪动
				var task=setTimeout(function(){layer.load(2);},1000);
				admin.request(moduleURL+"/get-by-id", { #(paramJson) }, function (data) {
					clearTimeout(task);
					layer.closeAll('loading');
					if(data.success) {
						admin.putTempData('#(formDataKey)-form-action', "edit",true);
						showEditForm(data.data);
					} else {
						 layer.msg(data.message, {icon: 1, time: 1500});
					}
				});
			} else if (layEvent === 'view') { // 修改
				//延迟显示加载动画，避免界面闪动
				var task=setTimeout(function(){layer.load(2);},1000);
				admin.request(moduleURL+"/get-by-id", { #(paramJson) }, function (data) {
					clearTimeout(task);
					layer.closeAll('loading');
					if(data.success) {
						admin.putTempData('#(formDataKey)-form-action', "view",true);
						showEditForm(data.data);
					} else {
						layer.msg(data.message, {icon: 1, time: 1500});
					}
				});
			}
			else if (layEvent === 'del') { // 删除
			
				layer.confirm(fox.translate('确定删除此')+fox.translate('#(topic)')+fox.translate('吗？'), function (i) {
					layer.close(i);
					layer.load(2);
					admin.request(moduleURL+"/delete", { #(paramJson) }, function (data) {
						layer.closeAll('loading');
						if (data.success) {
							layer.msg(data.message, {icon: 1, time: 500});
							refreshTableData();
						} else {
							layer.msg(data.message, {icon: 2, time: 1500});
						}
					});
				});
				
			}
			#for(b:opColumnButtons)
			else if (layEvent === '#(b.id)') { // #(b.label)
				#(b.jsFunction.name)(data);
			}
			#end
			#if(isTree)else if (layEvent === 'drill') {
			
				#(parentIdVar) = data.#(idPropertyName);
				navStack.push([data.id,data.label]);
				resetSearchFields();
				refreshTableData();
				refreshNav();
				
			} #end
		});
 
    };
    
    /**
     * 打开编辑窗口
     */
	function showEditForm(data) {
		var queryString="";
		if(data && data.#(idPropertyName)) queryString="?" + #(paramQueryString);
		admin.putTempData('#(formDataKey)', data);
		var area=admin.getTempData('#(formAreaKey)');
		var height= (area && area.height) ? area.height : ($(window).height()*0.6);
		var top= (area && area.top) ? area.top : (($(window).height()-height)/2);
		var title = (data && data.#(idPropertyName)) ? (fox.translate('修改')+fox.translate('#(topic)')) : (fox.translate('添加')+fox.translate('#(topic)'));
		var index=admin.popupCenter({
			title: title,
			resize: false,
			offset: [top,null],
			area: ["#(formWindow.width)px",height+"px"],
			type: 2,
			content: '#(formURI)' + queryString,
			finish: function () {
				refreshTableData();
			}
		});
		admin.putTempData('#(formDataKey)-popup-index', index);
	};

	#for(b:opColumnButtons)
	/**
	 * #(b.label) 操作
	 */
	#(b.jsFunction.source)
	#end

	#if(beforeQueryFunc!=null)
	#(beforeQueryFunc.source);
	#end

};


layui.config({
	dir: layuiPath,
	base: '/module/'
}).extend({
	xmSelect: 'xm-select/xm-select'
}).use(['form', 'table', 'util', 'settings', 'admin', 'upload','foxnic','xmSelect','laydate'],function() {
	(new ListPage()).init(layui);
});