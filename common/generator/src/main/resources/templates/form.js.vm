#(authorAndTime)

function FormPage() {

	var settings,admin,form,table,layer,util,fox,upload,xmSelect,foxup;
	const moduleURL="#(moduleURL)";

	var disableCreateNew=#(disableCreateNew);
	var disableModify=#(disableModify);
	/**
      * 入口函数，初始化
      */
	this.init=function(layui) {
     	admin = layui.admin,settings = layui.settings,form = layui.form,upload = layui.upload,foxup=layui.foxnicUpload;
		laydate = layui.laydate,table = layui.table,layer = layui.layer,util = layui.util,fox = layui.foxnic,xmSelect = layui.xmSelect;

		//如果没有修改和保存权限，
		if( !admin.checkAuth(AUTH_PREFIX+":update") && !admin.checkAuth(AUTH_PREFIX+":save")) {
			disableModify=true;
		}
		if(admin.getTempData('#(formDataKey)-form-action')=="view") {
			disableModify=true;
		}

		//渲染表单组件
		renderFormFields();

		//填充表单数据
		fillFormData();

		//绑定提交事件
		bindButtonEvent();

		#if(!hasUploadField)
		//调整窗口的高度与位置
		adjustPopup();
		#end
	}

	/**
	 * 自动调节窗口高度
	 * */
	var adjustPopupTask=-1;
	function adjustPopup() {
		clearTimeout(adjustPopupTask);
		var scroll=$(".form-container").attr("scroll");
		if(scroll=='yes') return;
		adjustPopupTask=setTimeout(function () {
			var body=$("body");
			var bodyHeight=body.height();
			var footerHeight=$(".model-form-footer").height();
			var area=admin.changePopupArea(null,bodyHeight+footerHeight);
			if(area==null) return;
			admin.putTempData('#(formAreaKey)', area);
			window.adjustPopup=adjustPopup;
			if(area.tooHeigh) {
				var windowHeight=area.iframeHeight;
				var finalHeight=windowHeight-footerHeight-16;
				//console.log("windowHeight="+windowHeight+',bodyHeight='+bodyHeight+",footerHeight="+footerHeight+",finalHeight="+finalHeight);
				$(".form-container").css("display","");
				$(".form-container").css("overflow-y","scroll");
				$(".form-container").css("height",finalHeight+"px");
				$(".form-container").attr("scroll","yes");
			}
		},250);
	}

	/**
      * 渲染表单组件
      */
	function renderFormFields() {
		fox.renderFormInputs(form);

	    #for(f : fields)
	    #if(f.typeName.equals("upload"))
	    //渲染图片字段
		foxup.render({
			el:"#(f.varName)",
			maxFileCount: #(f.uploadField.maxFileCount),
			displayFileName: #(f.uploadField.displayFileName),
			#if(f.uploadField.fileType=="image")
			accept: "image",
			#else if(f.uploadField.fileType=="video")
			accept: "video",
			#else if(f.uploadField.fileType=="audio")
			accept: "audio",
			#else if(f.uploadField.fileType=="all")
			accept: "file",
			#else
			accept: "file",
			#end
			#if(f.uploadField.getAcceptMimes(", ")!=null)
			acceptMime:'#(f.uploadField.getAcceptMimes(", "))',
			#end
			#if(f.uploadField.getAcceptExts("|")!=null)
			exts:'#(f.uploadField.getAcceptExts("|"))',
			#end
			afterPreview:function(elId,index,fileId,upload){
				adjustPopup();
			},
			afterUpload:function (result,index,upload) {
				console.log("文件上传后回调")
			},
			beforeRemove:function (elId,fileId,index,upload) {
				console.log("文件删除前回调");
				return true;
			},
			afterRemove:function (elId,fileId,index,upload) {
				adjustPopup();
			}
	    });
		#else if(f.typeName.equals("select_box"))
		//渲染 #(f.varName) 下拉字段
		fox.renderSelectBox({
			el: "#(f.varName)",
			radio: #(!f.selectField.muliti),
			filterable: #(f.selectField.filter),
			#if(f.selectField.paging)
			paging: true,
			pageRemote: true,
			#end
			#if(f.selectField.toolbar)
			toolbar: {show:true,showIcon:true,list:[ "ALL", "CLEAR","REVERSE"]},
			#end
			//转换数据
			#if(f.selectField.enumTypeName!=null)
			transform:function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.queryApi!=null)
			#if(f.selectField.filter)
			searchField: "#(f.selectField.textField)", //请自行调整用于搜索的字段名称
			extraParam: {}, //额外的查询参数，Object 或是 返回 Object 的函数
			#end
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				if(!data) return opts;
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
			#if(f.selectField.dictCode!=null)
			transform: function(data) {
				//要求格式 :[{name: '水果', value: 1},{name: '蔬菜', value: 2}]
				var opts=[];
				for (var i = 0; i < data.length; i++) {
					if(!data[i]) continue;
					opts.push({name:data[i].#(f.selectField.textField),value:data[i].#(f.selectField.valueField)});
				}
				return opts;
			}
			#end
		});
		#else if(f.typeName.equals("date_input"))
		laydate.render({
			elem: '##(f.varName)',
			format:"yyyy-MM-dd HH:mm:ss",
			trigger:"click"
		});
	    #end
	    #end
	}

	/**
      * 填充表单数据
      */
	function fillFormData() {
		var formData = admin.getTempData('#(formDataKey)');

		window.pageExt.form.beforeDataFill && window.pageExt.form.beforeDataFill(formData);

		#if(isSimplePK)
		//如果是新建
		if(!formData.#(idPropertyName)) {
			adjustPopup();
		}
		#end
		var fm=$('#data-form');
		if (formData) {
			fm[0].reset();
			form.val('data-form', formData);

	     	#for(f : fields)
			#if(f.isFormElem)
		    #if(f.typeName.equals("upload"))
			//设置 #(f.labelInForm) 显示附件
		    if($("##(f.varName)").val()) {
				foxup.fill("#(f.varName)",$("##(f.varName)").val());
		    } else {
				adjustPopup();
			}
		    #end
			#end
		    #end


			#for(f : fields)
			#if(f.isFormElem)
		    #if(f.typeName.equals("check_box"))
			//设置 #(f.labelInForm) 显示复选框勾选
		    if(formData["#(f.varName)"]) {
				fox.setCheckedValue("#(f.varName)",formData["#(f.varName)"]);
		    }
		    #end
			#end
		    #end


			#for(f : fields)
			#if(f.isFormElem)
			#if(f.typeName.equals("select_box"))
			//设置  #(f.labelInForm) 设置下拉框勾选
			#if(f.selectField.queryApi!=null && f.selectField.fillBy!=null)
			fox.setSelectValue4QueryApi("##(f.varName)",formData.#(f.selectField.fillBy));
			#elseif(f.selectField.dictCode!=null)
			fox.setSelectValue4Dict("##(f.varName)",formData.#(f.varName),SELECT_#(f.varName.toUpperCase())_DATA);
			#elseif(f.selectField.enumTypeName!=null)
			fox.setSelectValue4Enum("##(f.varName)",formData.#(f.varName),SELECT_#(f.varName.toUpperCase())_DATA);
			#end
			#end
			#end
			#end




	     	fm.attr('method', 'POST');
	     	renderFormFields();

		window.pageExt.form.afterDataFill && window.pageExt.form.afterDataFill(formData);

		}

		//渐显效果
		fm.css("opacity","0.0");
        fm.css("display","");
        setTimeout(function (){
            fm.animate({
                opacity:'1.0'
            },100);
        },1);

        //禁用编辑
		if(disableModify || disableCreateNew) {
			fox.lockForm($("#data-form"),true);
			$("#submit-button").hide();
			$("#cancel-button").css("margin-right","15px")
		} else {
			$("#submit-button").show();
			$("#cancel-button").css("margin-right","0px")
		}

		//调用 iframe 加载过程
		var formIfrs=$(".form-iframe");
		for (var i = 0; i < formIfrs.length; i++) {
			var jsFn=$(formIfrs[i]).attr("js-fn");
			if(window.pageExt.form){
				jsFn=window.pageExt.form[jsFn];
				jsFn && jsFn($(formIfrs[i]),$(formIfrs[i])[0].contentWindow,formData);
			}
		}

	}

	/**
      * 保存数据，表单提交事件
      */
    function bindButtonEvent() {

	    form.on('submit(submit-button)', function (data) {
	    	//debugger;
			data.field = form.val("data-form");

	    	#for(f : fields)
			#if(f.isFormElem)
		    #if(f.typeName.equals("logic_switch"))
			//处理 #(f.labelInForm) 默认值
		    if(!data.field.#(f.varName)) data.field.#(f.varName)=0;
		    #end
			#end
		    #end

			#for(f : fields)
			#if(f.isFormElem)
			#if(f.typeName.equals("check_box"))
			//处理 #(f.labelInForm) 默认值
			data.field["#(f.varName)"]=fox.getCheckedValue("#(f.varName)");
			#end
			#end
			#end

			#for(f : fields)
			#if(f.isFormElem)
			#if(f.typeName.equals("select_box"))
			//获取 #(f.labelInForm) 下拉框的值
			data.field["#(f.varName)"]=fox.getSelectedValue("#(f.varName)",#(f.selectField.muliti));
			#end
			#end
			#end

			//校验表单
			if(!fox.formVerify("data-form",data,VALIDATE_CONFIG)) return;

			if(window.pageExt.form.beforeSubmit) {
				var doNext=window.pageExt.form.beforeSubmit(data.field);
				if(!doNext) return ;
			}

	    	var api=moduleURL+"/"+(data.field.#(idPropertyName)?"update":"insert");
	        var task=setTimeout(function(){layer.load(2);},1000);
	        admin.request(api, data.field, function (data) {
	            clearTimeout(task);
			    layer.closeAll('loading');
	            if (data.success) {
	                layer.msg(data.message, {icon: 1, time: 500});
					var index=admin.getTempData('#(formDataKey)-popup-index');
	                admin.finishPopupCenter(index);
	            } else {
	                layer.msg(data.message, {icon: 2, time: 1000});
	            }
	        }, "POST");

	        return false;
	    });

	    //关闭窗口
	    $("#cancel-button").click(function(){admin.closePopupCenter();});

    }
}

layui.use(['form', 'table', 'util', 'settings', 'admin', 'upload','foxnic','xmSelect','foxnicUpload','laydate'],function() {
	var task=setInterval(function (){
		if(!window["pageExt"]) return;
		clearInterval(task);
		(new FormPage()).init(layui);
	},1);
});
