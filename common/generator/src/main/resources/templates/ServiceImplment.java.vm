package #(package);

#if(bpm)
import org.github.foxnic.web.domain.bpm.BpmActionResult;
import org.github.foxnic.web.domain.bpm.BpmEvent;
#end
import javax.annotation.Resource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.foxnic.commons.collection.MapUtil;
import java.util.Arrays;

#(imports)

#(classJavaDoc)


@Service("#(beanName)")
public class #(simpleName) extends SuperService<#(poSimpleName)> implements #(interfaceName) {

	/**
	 * 注入DAO对象
	 * */
	#if(daoName!=null && daoName!="")@Resource(name=#(daoName)) #else @Autowired  #end
	private DAO dao=null;

	/**
	 * 获得 DAO 对象
	 * */
	public DAO dao() { return dao; }

	#for (jd : injectDescs)
	@#(jd.annTypeName) #if(jd.resourceName!=null)(name="#(jd.resourceName)")#end
	private #(jd.typeName) #(jd.varName);
	#end


	@Override
	public Object generateId(Field field) {
		return IDGenerator.getSnowflakeIdString();
	}

	/**
	 * 添加，根据 throwsException 参数抛出异常或返回 Result 对象
	 *
	 * @param #(poVar)  数据对象
	 * @param throwsException 是否抛出异常，如果不抛出异常，则返回一个失败的 Result 对象
	 * @return 结果 , 如果失败返回 false，成功返回 true
	 */
	@Override
	#if(hasRelationSave)
	@Transactional
	#end
	public Result insert(#(poSimpleName) #(poVar),boolean throwsException) {
		Result r=super.insert(#(poVar),throwsException);
		#if(hasRelationSave)
		//保存关系
		if(r.success()) {
		#for (rd : relationSaveDescs)
			#(rd.injectDesc.varName).saveRelation(#(poVar).#(rd.idPropertyGetter)(), #(poVar).#(rd.slavePropertyGetter)());
		#end
		}
		#end
		return r;
	}

	/**
	 * 添加，如果语句错误，则抛出异常
	 * @param #(poVar) 数据对象
	 * @return 插入是否成功
	 * */
	@Override
	#if(hasRelationSave)
	@Transactional
	#end
	public Result insert(#(poSimpleName) #(poVar)) {
		return this.insert(#(poVar),true);
	}

	/**
	 * 批量插入实体，事务内
	 * @param #(poListVar) 实体数据清单
	 * @return 插入是否成功
	 * */
	@Override
	public Result insertList(List<#(poSimpleName)> #(poListVar)) {
		return super.insertList(#(poListVar));
	}

#(deleteByIdMethods)

	/**
	 * 更新，如果执行错误，则抛出异常
	 * @param #(poVar) 数据对象
	 * @param mode 保存模式
	 * @return 保存是否成功
	 * */
	@Override
	#if(hasRelationSave)
	@Transactional
	#end
	public Result update(#(poSimpleName) #(poVar) , SaveMode mode) {
		return this.update(#(poVar),mode,true);
	}

	/**
	 * 更新，根据 throwsException 参数抛出异常或返回 Result 对象
	 * @param #(poVar) 数据对象
	 * @param mode 保存模式
	 * @param throwsException 是否抛出异常，如果不抛出异常，则返回一个失败的 Result 对象
	 * @return 保存是否成功
	 * */
	@Override
	#if(hasRelationSave)
	@Transactional
	#end
	public Result update(#(poSimpleName) #(poVar) , SaveMode mode,boolean throwsException) {
		Result r=super.update(#(poVar) , mode , throwsException);
		#if(hasRelationSave)
		//保存关系
		if(r.success()) {
		#for (rd : relationSaveDescs)
			#(rd.injectDesc.varName).saveRelation(#(poVar).#(rd.idPropertyGetter)(), #(poVar).#(rd.slavePropertyGetter)());
		#end
		}
		#end
		return r;
	}

	/**
	 * 更新实体集，事务内
	 * @param #(poListVar) 数据对象列表
	 * @param mode 保存模式
	 * @return 保存是否成功
	 * */
	@Override
	public Result updateList(List<#(poSimpleName)> #(poListVar) , SaveMode mode) {
		return super.updateList(#(poListVar) , mode);
	}

#(updateByIdMethod)

#(getByIdMethod)

#if(isSimplePK)
	@Override
	public List<#(poSimpleName)> queryListByIds(List<#(idPropertyType)> #(idPropertyName)s) {
		return super.queryListByUKeys("#(idPropertyName)",#(idPropertyName)s);
	}

	@Override
	public Map<#(idPropertyType), #(poSimpleName)> queryMapByIds(List<#(idPropertyType)> #(idPropertyName)s) {
		return super.queryMapByUKeys("#(idPropertyName)",#(idPropertyName)s, #(poSimpleName)::#(idGetterMethodName));
	}
#end



	/**
	 * 查询实体集合，默认情况下，字符串使用模糊匹配，非字符串使用精确匹配
	 *
	 * @param sample  查询条件
	 * @return 查询结果
	 * */
	@Override
	public List<#(poSimpleName)> queryList(#(poSimpleName) sample) {
		return super.queryList(sample);
	}


	/**
	 * 分页查询实体集，字符串使用模糊匹配，非字符串使用精确匹配
	 *
	 * @param sample  查询条件
	 * @param pageSize 分页条数
	 * @param pageIndex 页码
	 * @return 查询结果
	 * */
	@Override
	public PagedList<#(poSimpleName)> queryPagedList(#(poSimpleName) sample, int pageSize, int pageIndex) {
		return super.queryPagedList(sample, pageSize, pageIndex);
	}

	/**
	 * 分页查询实体集，字符串使用模糊匹配，非字符串使用精确匹配
	 *
	 * @param sample  查询条件
	 * @param condition 其它条件
	 * @param pageSize 分页条数
	 * @param pageIndex 页码
	 * @return 查询结果
	 * */
	@Override
	public PagedList<#(poSimpleName)> queryPagedList(#(poSimpleName) sample, ConditionExpr condition, int pageSize, int pageIndex) {
		return super.queryPagedList(sample, condition, pageSize, pageIndex);
	}

	/**
	 * 检查 实体 是否已经存在 , 判断 主键值不同，但指定字段的值相同的记录是否存在
	 *
	 * @param #(poVar) 数据对象
	 * @return 判断结果
	 */
	public Boolean checkExists(#(poSimpleName) #(poVar)) {
		//TDOD 此处添加判断段的代码
		//boolean exists=super.checkExists(#(poVar), SYS_ROLE.NAME);
		//return exists;
		return false;
	}

	#if(isSimplePK)

	@Override
	public Boolean hasRefers(String #(idPropertyName)) {
		Map<#(idPropertyType), Boolean> map=this.hasRefers(Arrays.asList(#(idPropertyName)));
		Boolean ex=map.get(#(idPropertyName));
		if(ex==null) return false;
		return ex;
	}

	@Override
	public Map<#(idPropertyType), Boolean> hasRefers(List<#(idPropertyType)> #(idPropertyName)s) {
		// 默认无业务逻辑，返回此行；有业务逻辑需要校验时，请修改并使用已注释的行代码！！！
		return MapUtil.asMap(ids,false);
		// return super.hasRefers(FoxnicWeb.BPM_PROCESS_INSTANCE.FORM_DEFINITION_ID,#(idPropertyName)s);
	}

	#end



	@Override
	public ExcelWriter exportExcel(#(poSimpleName) sample) {
		return super.exportExcel(sample);
	}

	@Override
	public ExcelWriter exportExcelTemplate() {
		return super.exportExcelTemplate();
	}

	@Override
	public List<ValidateResult> importExcel(InputStream input,int sheetIndex,boolean batch) {
		return super.importExcel(input,sheetIndex,batch);
	}

	@Override
	public ExcelStructure buildExcelStructure(boolean isForExport) {
		return super.buildExcelStructure(isForExport);
	}

	#if(relationMasterIdField!=null)
	/**
     * 保存关系
     * @param #(relationMasterVar) #(relationMasterVarDoc)
     * @param #(relationSlaveVar) #(relationSlaveVarDoc)
     */
	public void saveRelation(#(relationMasterVarType) #(relationMasterVar),List<#(relationSlaveVarType)> #(relationSlaveVar)) {
		super.saveRelation(#(relationMasterPoType).class,#(relationMasterIdField),#(relationMasterVar),#(relationSlavePoType).class,#(relationSlaveIdField),#(relationSlaveVar),#(isRelationClearWhenEmpty));
	}
	#end

	#if(bpm)
	/**
	 * 用户动作处理，返回失败时不再继续处理
	 * */
	@Override
	public BpmActionResult onUserAction(BpmEvent event) {
		BpmActionResult result=event.getActionResult();
		// 获得当前表单数据
		#(poSimpleName) #(poVar)= this.getById(event.getBillId());
		//TODO 此处可查询相关数据，并对业务单据进行处理。如果 Result 返回 失败，用户操作将中断，并在界面给出提示信息
		return result;
	}

	/**
	 * 流程事件处理，返回值不影响后续逻辑
	 * */
	@Override
	public BpmActionResult onNodeEvent(BpmEvent event) {
		// 获得当前表单数据
		#(poSimpleName) #(poVar) = this.getById(event.getBillId());
		if(event.getEventType()== BpmEventType.NODE_START) {
			//TODO 处理节点前事件
		} else if(event.getEventType()== BpmEventType.NODE_END) {
			//TODO 处理节点后事件
		}
		return event.getActionResult();
	}

	/**
	 * 用户流程废弃动作处理，START 事件返回失败时不再继续处理
	 * */
	@Override
	public BpmActionResult onProcessAbandon(BpmEvent event) {
		// 获得当前表单数据
		#(poSimpleName) #(poVar) = this.getById(event.getBillId());
		if(event.getEventType()== BpmEventType.PROCESS_ABANDON_START) {
			//TODO 处理流程废弃开始动作，可返回 失败的 BpmActionResult 对象拒绝删除
		} else if(event.getEventType()== BpmEventType.PROCESS_ABANDON_END) {
			//TODO 处理流程废弃成功后，可处理相关单据
		}
		return event.getActionResult();
	}

	/**
	* 用户流程暂存动作处理，START 事件返回失败时不再继续处理
	* */
	@Override
	public BpmActionResult onProcessTemporarySave(BpmEvent event) {
		// 获得当前表单数据
		#(poSimpleName) #(poVar) = this.getById(event.getBillId());
		if(event.getEventType()== BpmEventType.TEMPORARY_SAVE_START) {
			//TODO 处理流程暂存开始动作，可返回 失败的 BpmActionResult 对象暂存删除
		} else if(event.getEventType()== BpmEventType.TEMPORARY_SAVE_END) {
			//TODO 处理流程暂存成功后，可处理相关单据
		}
		return event.getActionResult();
	}





	#end

}
